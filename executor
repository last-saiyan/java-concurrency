public class Executor {

    private BlockingQueue taskQueue = null;
    private List<Threadpool> threads = new ArrayList<Threadpool>();
    private boolean isStopped = false;

    public Executor(int noOfThreads){
        taskQueue = new BlockingQueue(noOfThreads);

        for(int i=0; i<noOfThreads; i++){
            threads.add(new Threadpool(taskQueue));
        }
        for(Threadpool thread : threads){
            thread.start();
        }
    }

    public synchronized void  execute(Runnable task) throws Exception{
        if(this.isStopped) throw
            new IllegalStateException("ThreadPool is stopped");
        this.taskQueue.enqueue(task);
    }

    public synchronized void stop(){
        this.isStopped = true;
        for(PoolThread thread : threads){
           thread.doStop();
        }
    }

}
